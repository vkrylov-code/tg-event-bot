import os
import html
import logging
from uuid import uuid4
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import psycopg2
from psycopg2.extras import RealDictCursor, Json

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
DATABASE_URL = os.environ.get("DATABASE_URL")

if not TOKEN or not DATABASE_URL or not ADMIN_ID:
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN, DATABASE_URL –∏–ª–∏ ADMIN_ID.")
    raise SystemExit("–ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏ ---
events = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard(event_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä"),
        ]
    ])

def format_user_link(user_id: int, name: str) -> str:
    safe = html.escape(name)
    return f'<a href="tg://user?id={user_id}">{safe}</a>'

def format_event(event_id: str) -> str:
    event = events[event_id]
    title = html.escape(event["text"])
    parts = [f"<b>{title}</b>\n"]
    lists = event["lists"]
    plus_counts = event["plus_counts"]
    user_names = event["user_names"]

    # ‚úÖ –Ø –±—É–¥—É
    lines = []
    for uid in sorted(lists["–Ø –±—É–¥—É"], key=lambda x: user_names.get(x, "")):
        name = user_names.get(uid, "User")
        link = format_user_link(uid, name)
        cnt = plus_counts.get(uid, 0)
        lines.append(link + (f" +{cnt}" if cnt > 0 else ""))
    parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + ("\n".join(lines) if lines else "‚Äî"))

    # –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–ª—é—Å—ã
    anon_count = plus_counts.get("anon", 0)
    if anon_count > 0:
        parts.append(f"‚Äî +{anon_count}")

    # ‚ùå –Ø –Ω–µ –∏–¥—É
    lines_no = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–Ø –Ω–µ –∏–¥—É"], key=lambda x: user_names.get(x, ""))]
    parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + ("\n".join(lines_no) if lines_no else "‚Äî"))

    # ü§î –î—É–º–∞—é
    lines_think = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–î—É–º–∞—é"], key=lambda x: user_names.get(x, ""))]
    parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + ("\n".join(lines_think) if lines_think else "‚Äî"))

    # –ò—Ç–æ–≥–∏
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_plus_count = sum(plus_counts.get(uid, 0) for uid in lists["–Ø –±—É–¥—É"])
    total_anon_plus = plus_counts.get("anon", 0)
    total_go = total_yes_people + total_plus_count + total_anon_plus
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def save_event(event_id, event):
    event_copy = {
        **event,
        "lists": {k: list(v) for k, v in event["lists"].items()},
        "created_at": event.get("created_at", datetime.utcnow().isoformat())
    }
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS events (
                event_id TEXT PRIMARY KEY,
                data JSONB
            )
        """)
        cur.execute("""
            INSERT INTO events (event_id, data)
            VALUES (%s, %s)
            ON CONFLICT (event_id) DO UPDATE SET data = EXCLUDED.data
        """, (event_id, Json(event_copy)))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è %s: %s", event_id, e)

def load_events():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("SELECT * FROM events")
        rows = cur.fetchall()
        for row in rows:
            event_id = row["event_id"]
            data = row["data"]
            data["lists"] = {k: set(v) for k, v in data["lists"].items()}
            events[event_id] = data
        cur.close()
        conn.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %s", e)

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/new_event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
        "/new_event –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    )

async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text or ""
    text = raw
    if raw.startswith("/new_event"):
        text = raw[len("/new_event"):].strip()
    if not text:
        text = "–°–æ–±—ã—Ç–∏–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"

    event_id = uuid4().hex
    events[event_id] = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},
        "user_names": {},
        "closed": False,
        "created_at": datetime.utcnow().isoformat()
    }
    
    save_event(event_id, events[event_id])
    logger.info("–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ id=%s by %s: %s", event_id, update.effective_user.full_name, text)

    await update.message.reply_text(
        format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    load_events()
    if not events:
        await update.message.reply_text("–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
        return
    msg = "<b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n"
    for eid, ev in events.items():
        msg += f"ID: <code>{eid}</code> ‚Äî {html.escape(ev['text'])}\n"
    msg += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/delete_event <ID>"
    await update.message.reply_text(msg, parse_mode="HTML")

async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_event <ID>")
        return
    event_id = args[0]
    if event_id not in events:
        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("DELETE FROM events WHERE event_id = %s", (event_id,))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è %s: %s", event_id, e)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        return

    events.pop(event_id, None)
    await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        event_id, action = query.data.split("|", 1)
    except ValueError:
        return
    if event_id not in events:
        await query.edit_message_text("–°–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    event = events[event_id]
    uid = query.from_user.id
    name = query.from_user.full_name
    if action == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        event["closed"] = True
    elif action in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
        for k in event["lists"]:
            event["lists"][k].discard(uid)
        event["lists"][action].add(uid)
        event["user_names"][uid] = name
    elif action in ["–ü–ª—é—Å", "–ú–∏–Ω—É—Å"]:
        if uid in event["lists"]["–Ø –±—É–¥—É"]:
            event["plus_counts"][uid] = event["plus_counts"].get(uid, 0) + (1 if action == "–ü–ª—é—Å" else -1)
        else:
            event["plus_counts"]["anon"] = event["plus_counts"].get("anon", 0) + (1 if action == "–ü–ª—é—Å" else -1)
    save_event(event_id, event)
    try:
        await query.edit_message_text(
            format_event(event_id),
            parse_mode="HTML",
            reply_markup=get_keyboard(event_id)
        )
    except BadRequest:
        pass

# --- –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π ---
async def cleanup_events(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.utcnow()
    to_delete = []
    for eid, ev in events.items():
        created_at = datetime.fromisoformat(ev["created_at"])
        if ev.get("closed") or (now - created_at > timedelta(days=30)):
            to_delete.append(eid)
    if not to_delete:
        return
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        for eid in to_delete:
            cur.execute("DELETE FROM events WHERE event_id = %s", (eid,))
            events.pop(eid, None)
        conn.commit()
        cur.close()
        conn.close()
        logger.info("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π %d", len(to_delete))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: %s", e)

# --- Main ---
def main():
    load_events()
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new_event", new_event))
    application.add_handler(CommandHandler("events", show_events))
    application.add_handler(CommandHandler("delete_event", delete_event))
    application.add_handler(CallbackQueryHandler(button_click))
    
    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    application.job_queue.run_repeating(cleanup_events, interval=6*3600, first=10)

    application.run_polling()

if __name__ == "__main__":
    main()

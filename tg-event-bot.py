import os
import html
import logging
from uuid import uuid4
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import psycopg2
from psycopg2.extras import RealDictCursor, Json

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
ADMIN_ID = int(os.environ.get("ADMIN_ID"))

if not TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –ü—Ä–µ–∫—Ä–∞—â–∞—é –∑–∞–ø—É—Å–∫.")
    raise SystemExit("BOT_TOKEN is required")

DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL. –ü—Ä–µ–∫—Ä–∞—â–∞—é –∑–∞–ø—É—Å–∫.")
    raise SystemExit("DATABASE_URL is required")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏ ---
events = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard(event_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä"),
        ]
    ])

def format_user_link(user_id: int, name: str) -> str:
    safe = html.escape(name)
    return f'<a href="tg://user?id={user_id}">{safe}</a>'

def format_event(event_id: str) -> str:
    event = events[event_id]
    title = html.escape(event["text"])
    parts = [f"<b>{title}</b>\n"]
    lists = event["lists"]
    plus_counts = event["plus_counts"]
    user_names = event["user_names"]

    # ‚úÖ –Ø –±—É–¥—É
    lines = []
    total_plus = 0
    for uid in sorted(lists["–Ø –±—É–¥—É"], key=lambda x: user_names.get(x, "")):
        name = user_names.get(uid, "User")
        link = format_user_link(uid, name)
        cnt = plus_counts.get(uid, 0)
        total_plus += cnt
        lines.append(link + (f" +{cnt}" if cnt > 0 else ""))
    parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + ("\n".join(lines) if lines else "‚Äî"))

    # –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–ª—é—Å—ã (—Ç–æ–ª—å–∫–æ –ø–ª—é—Å—ã, –Ω–µ "–Ø –±—É–¥—É")
    anon_total = sum(cnt for uid, cnt in plus_counts.items() if uid not in lists["–Ø –±—É–¥—É"])
    if anon_total > 0:
        parts.append(f"‚Äî –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–ª—é—Å—ã: +{anon_total}")

    # ‚ùå –Ø –Ω–µ –∏–¥—É
    lines_no = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–Ø –Ω–µ –∏–¥—É"], key=lambda x: user_names.get(x, ""))]
    parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + ("\n".join(lines_no) if lines_no else "‚Äî"))

    # ü§î –î—É–º–∞—é
    lines_think = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–î—É–º–∞—é"], key=lambda x: user_names.get(x, ""))]
    parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + ("\n".join(lines_think) if lines_think else "‚Äî"))

    # –ò—Ç–æ–≥–∏
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_go = total_yes_people + total_plus + anon_total
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def save_event(event_id, event):
    event_copy = {
        **event,
        "lists": {k: list(v) for k, v in event["lists"].items()}
    }
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS events (
                event_id TEXT PRIMARY KEY,
                data JSONB
            )
            """
        )
        cur.execute(
            """
            INSERT INTO events (event_id, data)
            VALUES (%s, %s)
            ON CONFLICT (event_id) DO UPDATE SET data = EXCLUDED.data
            """,
            (event_id, Json(event_copy))
        )
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è %s: %s", event_id, e)

def load_events():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("SELECT * FROM events")
        rows = cur.fetchall()
        for row in rows:
            event_id = row["event_id"]
            data = row["data"]
            data["lists"] = {k: set(v) for k, v in data["lists"].items()}
            events[event_id] = data
        cur.close()
        conn.close()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %s", e)

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/new_event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
        "/new_event –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    )

async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text or ""
    text = raw
    if raw.startswith("/new_event"):
        text = raw[len("/new_event"):].strip()
    if not text:
        text = "–°–æ–±—ã—Ç–∏–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"

    event_id = uuid4().hex
    events[event_id] = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},
        "user_names": {},
        "closed": False
    }
    
    save_event(event_id, events[event_id])
    logger.info("–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ id=%s by %s: %s", event_id, update.effective_user.full_name, text)

    await update.message.reply_text(
        format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    load_events()
    if not events:
        await update.message.reply_text("–°–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
        return
    msg = ""
    for eid, ev in events.items():
        msg += f"{eid}: {html.escape(ev['text'])}\n"
    await update.message.reply_text(msg)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        event_id, btn = query.data.split("|", 1)
    except ValueError:
        logger.warning("Bad callback_data: %s", query.data)
        return

    event = events.get(event_id)
    if not event:
        await query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_id = query.from_user.id
    user_name = query.from_user.full_name
    event["user_names"][user_id] = user_name
    old_text = format_event(event_id)
    old_markup_present = bool(query.message.reply_markup and getattr(query.message.reply_markup, "inline_keyboard", None))

    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        if event["closed"]:
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            return
        event["closed"] = True
    else:
        if event["closed"]:
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
            return

        if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            for k in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
                if k != btn:
                    event["lists"][k].discard(user_id)
            event["lists"][btn].add(user_id)
            if btn != "–Ø –±—É–¥—É":
                event["plus_counts"].pop(user_id, None)
        elif btn == "–ü–ª—é—Å":
            if user_id in event["lists"]["–Ø –±—É–¥—É"]:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–¥—ë—Ç ‚Äî –ø–ª—é—Å—ã –∫ –µ–≥–æ –∏–º–µ–Ω–∏
                event["plus_counts"][user_id] = event["plus_counts"].get(user_id, 0) + 1
            else:
                # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–ª—é—Å
                anon_key = f"anon_{uuid4().hex}"
                event["plus_counts"][anon_key] = 1
        elif btn == "–ú–∏–Ω—É—Å":
            # –ú–∏–Ω—É—Å—ã —É–±–∏—Ä–∞—é—Ç—Å—è –∫–∞–∫ —É "–Ø –±—É–¥—É", —Ç–∞–∫ –∏ —É –∞–Ω–æ–Ω–∏–º–æ–≤
            to_remove = []
            for uid, cnt in event["plus_counts"].items():
                if (uid == user_id) or (str(uid).startswith("anon_")):
                    event["plus_counts"][uid] -= 1
                    if event["plus_counts"][uid] <= 0:
                        to_remove.append(uid)
            for uid in to_remove:
                event["plus_counts"].pop(uid, None)

    save_event(event_id, event)
    new_text = format_event(event_id)
    need_edit = new_text != old_text or (old_markup_present and event["closed"])
    reply_markup = None if event["closed"] else get_keyboard(event_id)
    if need_edit:
        try:
            await query.edit_message_text(text=new_text, parse_mode="HTML", reply_markup=reply_markup)
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                logger.exception("BadRequest: %s", e)
                raise

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    load_events()
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new_event", new_event))
    application.add_handler(CommandHandler("events", show_events))
    application.add_handler(CallbackQueryHandler(button_click))
    
    application.run_polling()

if __name__ == "__main__":
    main()

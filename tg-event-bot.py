import os
import json
import logging
from uuid import uuid4
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# =====================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =====================
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
ADMIN_ID = int(os.environ.get("ADMIN_ID"))  # –¢–≤–æ–π Telegram ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
DATA_DIR = "/data"
DATA_FILE = os.path.join(DATA_DIR, "events.json")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(DATA_DIR, exist_ok=True)

# =====================
# –õ–û–ì–ò
# =====================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# =====================
# –•–†–ê–ù–ò–õ–ò–©–ï
# =====================
events = {}

def save_events():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ JSON"""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(events, f, ensure_ascii=False)
        logging.info("–°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ %s", DATA_FILE)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: %s", e)

def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ JSON"""
    global events
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                events = json.load(f)
            logging.info("–°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã (%s)", len(events))
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: %s", e)
            events = {}
    else:
        logging.info("–§–∞–π–ª —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        events = {}

# =====================
# –õ–û–ì–ò–ö–ê
# =====================
def get_keyboard(event_id):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"yes|{event_id}"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"no|{event_id}"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"maybe|{event_id}")
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"plus|{event_id}"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"minus|{event_id}"),
            InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"close|{event_id}")
        ]
    ])

def format_event(event):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    text = event["text"] + "\n\n"
    text += "‚úÖ –Ø –±—É–¥—É:\n"
    for user_id, user_data in event["yes"].items():
        count = user_data.get("plus", 0)
        plus_text = f" +{count}" if count > 0 else ""
        text += f"[{user_data['name']}](tg://user?id={user_id}){plus_text}\n"

    text += "\n‚ùå –Ø –Ω–µ –∏–¥—É:\n"
    for user_id, user_data in event["no"].items():
        text += f"[{user_data['name']}](tg://user?id={user_id})\n"

    text += "\nü§î –î—É–º–∞—é:\n"
    for user_id, user_data in event["maybe"].items():
        text += f"[{user_data['name']}](tg://user?id={user_id})\n"

    # –ü–æ–¥—Å—á—ë—Ç—ã
    total_yes = len(event["yes"]) + sum(u["plus"] for u in event["yes"].values())
    total_no = len(event["no"])
    total_maybe = len(event["maybe"])

    text += "\n-----------------\n"
    text += f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_yes}\n"
    text += f"‚úÖ {total_yes}\n"
    text += f"‚ùå {total_no}\n"
    text += f"ü§î {total_maybe}"

    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.")

async def create(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_id = uuid4().hex
    text = " ".join(context.args) if context.args else "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"
    events[event_id] = {
        "text": text,
        "yes": {},
        "no": {},
        "maybe": {},
        "plus_no_name": 0
    }
    save_events()
    await update.message.reply_text(text, reply_markup=get_keyboard(event_id), parse_mode="Markdown")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, event_id = query.data.split("|")
    event = events.get(event_id)

    if not event:
        logging.warning("Event not found: %s", event_id)
        await query.edit_message_text("–°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return

    user_id = str(query.from_user.id)
    user_name = query.from_user.full_name

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if action in ["yes", "no", "maybe"]:
        event["yes"].pop(user_id, None)
        event["no"].pop(user_id, None)
        event["maybe"].pop(user_id, None)

    if action == "yes":
        event["yes"][user_id] = {"name": user_name, "plus": event["yes"].get(user_id, {}).get("plus", 0)}
    elif action == "no":
        event["no"][user_id] = {"name": user_name}
    elif action == "maybe":
        event["maybe"][user_id] = {"name": user_name}
    elif action == "plus":
        if user_id in event["yes"]:
            event["yes"][user_id]["plus"] = event["yes"][user_id].get("plus", 0) + 1
        else:
            event["plus_no_name"] += 1
    elif action == "minus":
        if user_id in event["yes"] and event["yes"][user_id].get("plus", 0) > 0:
            event["yes"][user_id]["plus"] -= 1
        elif event["plus_no_name"] > 0:
            event["plus_no_name"] -= 1
    elif action == "close":
        await query.edit_message_text(format_event(event), parse_mode="Markdown")
        events.pop(event_id, None)
        save_events()
        return

    save_events()
    await query.edit_message_text(format_event(event), reply_markup=get_keyboard(event_id), parse_mode="Markdown")

# =====================
# –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê /dump
# =====================
async def dump(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not os.path.exists(DATA_FILE):
        await update.message.reply_text("–§–∞–π–ª —Å–æ–±—ã—Ç–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = f.read()

    if len(data) > 4000:
        await update.message.reply_document(document=open(DATA_FILE, "rb"))
    else:
        await update.message.reply_text(f"```\n{data}\n```", parse_mode="Markdown")

# =====================
# –ó–ê–ü–£–°–ö
# =====================
if __name__ == "__main__":
    load_events()

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("create", create))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("dump", dump))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

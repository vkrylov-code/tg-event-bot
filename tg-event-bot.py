import os
import json
import html
import logging
import uuid
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)

# === –õ–û–ì–ò ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π ===
DATA_FILE = "/data/events.json"
events = {}

def save_events():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ JSON"""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(events, f, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ JSON"""
    global events
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                events = json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            events = {}
    else:
        events = {}

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º ===
def format_user_link(user_id: int, name: str) -> str:
    safe_name = html.escape(name)
    return f'<a href="tg://user?id={user_id}">{safe_name}</a>'

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
def format_event(event_id: str) -> str:
    event = events[event_id]
    title = html.escape(event["text"])
    parts = [f"<b>{title}</b>\n"]

    lists = event["lists"]
    plus_counts = event["plus_counts"]
    user_names = event["user_names"]

    def list_to_str(status):
        result = []
        for uid in sorted(lists[status], key=lambda x: user_names.get(str(x), "")):
            link = format_user_link(uid, user_names[str(uid)])
            cnt = plus_counts.get(str(uid), 0)
            if cnt > 0 and status == "–Ø –±—É–¥—É":
                result.append(f"{link} +{cnt}")
            else:
                result.append(link)
        return "\n".join(result) if result else ""

    if lists["–Ø –±—É–¥—É"]:
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + list_to_str("–Ø –±—É–¥—É") + "\n")
    if lists["–Ø –Ω–µ –∏–¥—É"]:
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + list_to_str("–Ø –Ω–µ –∏–¥—É") + "\n")
    if lists["–î—É–º–∞—é"]:
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + list_to_str("–î—É–º–∞—é") + "\n")

    # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_plus_count = sum(plus_counts.values())
    total_go = total_yes_people + total_plus_count
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ ===
def get_keyboard(event_id: str):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("+1", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("-1", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å"),
        ]
    ])

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å /event –∏ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞.")

# === –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
async def event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è")
        return

    event_text = " ".join(context.args)
    event_id = uuid.uuid4().hex

    events[event_id] = {
        "text": event_text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},
        "user_names": {},
        "closed": False
    }
    save_events()

    await update.message.reply_html(
        format_event(event_id),
        reply_markup=get_keyboard(event_id)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        event_id, btn = query.data.split("|", 1)
    except ValueError:
        return

    event = events.get(event_id)
    if not event:
        logger.warning(f"Event not found: {event_id}")
        await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
        return

    user_id = query.from_user.id
    user_name = query.from_user.full_name
    event["user_names"][str(user_id)] = user_name  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è

    lists = event["lists"]
    plus_counts = event["plus_counts"]

    if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
        for k in lists:
            lists[k].discard(user_id)
        lists[btn].add(user_id)

    elif btn == "–ü–ª—é—Å":
        if str(user_id) in plus_counts:
            plus_counts[str(user_id)] += 1
        else:
            plus_counts[str(user_id)] = 1
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ "–Ø –±—É–¥—É" ‚Äî –ø—Ä–æ—Å—Ç–æ +N –±–µ–∑ –∏–º–µ–Ω–∏
        if user_id not in lists["–Ø –±—É–¥—É"]:
            plus_counts.setdefault("no_name", 0)
            plus_counts["no_name"] += 1

    elif btn == "–ú–∏–Ω—É—Å":
        if str(user_id) in plus_counts and plus_counts[str(user_id)] > 0:
            plus_counts[str(user_id)] -= 1
        if "no_name" in plus_counts and plus_counts["no_name"] > 0:
            plus_counts["no_name"] -= 1

    elif btn == "–ó–∞–∫—Ä—ã—Ç—å":
        event["closed"] = True

    save_events()

    if event["closed"]:
        await query.edit_message_text(format_event(event_id), parse_mode="HTML")
    else:
        try:
            await query.edit_message_text(
                format_event(event_id),
                reply_markup=get_keyboard(event_id),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"Edit message failed: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏ ===
def main():
    load_events()

    TOKEN = os.environ["BOT_TOKEN"]
    APP_URL = os.environ["RENDER_EXTERNAL_URL"]

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("event", event_command))
    app.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        url_path=TOKEN,
        webhook_url=f"{APP_URL}/{TOKEN}"
    )

if __name__ == "__main__":
    main()

import os
from uuid import uuid4
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://mybot.onrender.com/<secret_path>

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π
events = {}

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(event_id, closed=False):
    if closed:
        return None
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é")
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä")
        ]
    ])

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
def format_event(event_id):
    event = events[event_id]
    text = event["text"]

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    lists = event["lists"]
    plus_counts = event["plus_counts"]

    def format_users(users):
        result = []
        for user in users:
            if user in plus_counts:
                result.append(f"{user} +{plus_counts[user]}")
            else:
                result.append(user)
        return result

    parts = []
    if lists["–Ø –±—É–¥—É"]:
        parts.append("\n<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + "\n".join(format_users(lists["–Ø –±—É–¥—É"])))
    if lists["–Ø –Ω–µ –∏–¥—É"]:
        parts.append("\n<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + "\n".join(lists["–Ø –Ω–µ –∏–¥—É"]))
    if lists["–î—É–º–∞—é"]:
        parts.append("\n<b>ü§î –î—É–º–∞—é:</b>\n" + "\n".join(lists["–î—É–º–∞—é"]))

    # –ò—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫
    total_count = len(lists["–Ø –±—É–¥—É"]) + sum(plus_counts.values())
    summary = [
        "-----------------",
        f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_count}",
        f"‚úÖ {len(lists['–Ø –±—É–¥—É']) + sum(plus_counts.values())}",
        f"‚ùå {len(lists['–Ø –Ω–µ –∏–¥—É'])}",
        f"ü§î {len(lists['–î—É–º–∞—é'])}"
    ]

    return text + "\n" + "\n".join(parts) + "\n" + "\n".join(summary)

# –ö–æ–º–∞–Ω–¥–∞ /new_event
async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_id = str(uuid4())
    text = " ".join(context.args) if context.args else "–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    text = update.message.text.replace("/new_event", "").strip()

    events[event_id] = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},
        "closed": False
    }

    await update.message.reply_text(
        format_event(event_id),
        reply_markup=get_keyboard(event_id),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    event_id, btn = query.data.split("|")
    event = events.get(event_id)
    if not event:
        return

    user_name = query.from_user.full_name
    old_text = format_event(event_id)

    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        event["closed"] = True
    elif event["closed"]:
        await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        return
    elif btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
        for key in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            if key != btn:
                event["lists"][key].discard(user_name)
        event["lists"][btn].add(user_name)
        if btn != "–Ø –±—É–¥—É":
            event["plus_counts"].pop(user_name, None)
    elif btn == "–ü–ª—é—Å":
        event["lists"]["–î—É–º–∞—é"].discard(user_name)
        event["lists"]["–Ø –Ω–µ –∏–¥—É"].discard(user_name)
        event["lists"]["–Ø –±—É–¥—É"].add(user_name)
        event["plus_counts"][user_name] = event["plus_counts"].get(user_name, 0) + 1
    elif btn == "–ú–∏–Ω—É—Å":
        if user_name in event["plus_counts"]:
            event["plus_counts"][user_name] -= 1
            if event["plus_counts"][user_name] <= 0:
                event["plus_counts"].pop(user_name)
                event["lists"]["–Ø –±—É–¥—É"].discard(user_name)

    new_text = format_event(event_id)

    if new_text == old_text:
        return

    await query.edit_message_text(
        text=new_text,
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id, closed=event["closed"])
    )

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /new_event <—Ç–µ–∫—Å—Ç> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new_event", new_event))
    app.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()

import os
import html
import logging
from uuid import uuid4
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import psycopg2
from psycopg2.extras import RealDictCursor, Json

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
ADMIN_ID = int(os.environ.get("ADMIN_ID"))

DB_URL = os.environ.get("DATABASE_URL")  # PostgreSQL URL

if not TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –ü—Ä–µ–∫—Ä–∞—â–∞—é –∑–∞–ø—É—Å–∫.")
    raise SystemExit("BOT_TOKEN is required")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
def get_db_conn():
    return psycopg2.connect(DB_URL, cursor_factory=RealDictCursor)

def init_db():
    try:
        conn = get_db_conn()
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS events (
                    id TEXT PRIMARY KEY,
                    data JSONB NOT NULL
                )
            """)
            conn.commit()
        conn.close()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ events –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %s", e)
        raise

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
events = {}
def load_events():
    try:
        conn = get_db_conn()
        with conn.cursor() as cur:
            cur.execute("SELECT id, data FROM events")
            rows = cur.fetchall()
            for row in rows:
                events[row["id"]] = row["data"]
        conn.close()
        logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î", len(events))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î: %s", e)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î ---
def save_event(event_id, event):
    try:
        conn = get_db_conn()
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO events (id, data)
                VALUES (%s, %s)
                ON CONFLICT (id) DO UPDATE SET data = EXCLUDED.data
            """, (event_id, Json(event)))
            conn.commit()
        conn.close()
        logger.debug("–°–æ–±—ã—Ç–∏–µ %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", event_id)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è %s: %s", event_id, e)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard(event_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä"),
        ]
    ])

def format_user_link(user_id: int, name: str) -> str:
    safe = html.escape(name)
    return f'<a href="tg://user?id={user_id}">{safe}</a>'

def format_event(event_id: str) -> str:
    event = events[event_id]
    title = html.escape(event["text"])
    parts = [f"<b>{title}</b>\n"]
    lists = event["lists"]
    plus_counts = event["plus_counts"]
    user_names = event["user_names"]

    # ‚úÖ –Ø –±—É–¥—É
    if lists["–Ø –±—É–¥—É"]:
        lines = []
        for uid in sorted(lists["–Ø –±—É–¥—É"], key=lambda x: user_names.get(x, "")):
            name = user_names.get(uid, "User")
            link = format_user_link(uid, name)
            cnt = plus_counts.get(uid, 0)
            lines.append(link + (f" +{cnt}" if cnt > 0 else ""))
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n‚Äî\n")

    # –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–ª—é—Å—ã
    anon_lines = []
    for uid, cnt in sorted(plus_counts.items(), key=lambda x: user_names.get(x[0], "")):
        if uid not in lists["–Ø –±—É–¥—É"]:
            anon_lines.append(f"‚Äî +{cnt}")
    if anon_lines:
        parts.append("\n".join(anon_lines) + "\n")

    # ‚ùå –Ø –Ω–µ –∏–¥—É
    if lists["–Ø –Ω–µ –∏–¥—É"]:
        lines = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–Ø –Ω–µ –∏–¥—É"], key=lambda x: user_names.get(x, ""))]
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n‚Äî\n")

    # ü§î –î—É–º–∞—é
    if lists["–î—É–º–∞—é"]:
        lines = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–î—É–º–∞—é"], key=lambda x: user_names.get(x, ""))]
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n‚Äî\n")

    # –ò—Ç–æ–≥
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_plus_count = sum(plus_counts.values())
    total_go = total_yes_people + total_plus_count
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        return
    await msg.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/new_event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
        "/new_event –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    )

async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        return

    raw = msg.text or ""
    text = raw[len("/new_event"):].strip() if raw.startswith("/new_event") else raw
    if not text:
        text = "–°–æ–±—ã—Ç–∏–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"

    event_id = uuid4().hex
    event = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},
        "user_names": {},
        "closed": False
    }
    events[event_id] = event
    save_event(event_id, event)

    logger.info("–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ id=%s by %s: %s", event_id, update.effective_user.full_name, text)

    await msg.reply_text(
        format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )
    
# --- –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä ---
async def list_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π.")
        return

    if not events:
        await update.message.reply_text("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = []
    for event_id, event in events.items():
        text = html.escape(event["text"].replace("\n", " "))
        total_yes = len(event["lists"]["–Ø –±—É–¥—É"])
        total_no = len(event["lists"]["–Ø –Ω–µ –∏–¥—É"])
        total_think = len(event["lists"]["–î—É–º–∞—é"])
        total_plus = sum(event["plus_counts"].values())
        closed = "‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç" if event["closed"] else "üü¢ –û—Ç–∫—Ä—ã—Ç"
        lines.append(f"<b>{text}</b>\nID: <code>{event_id}</code>\n‚úÖ {total_yes} + {total_plus} | ‚ùå {total_no} | ü§î {total_think} | {closed}\n---")

    message = "\n".join(lines)
    await update.message.reply_text(message, parse_mode="HTML")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    try:
        event_id, btn = query.data.split("|", 1)
    except ValueError:
        logger.warning("Bad callback_data: %s", query.data)
        return

    event = events.get(event_id)
    if not event:
        await query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_id = query.from_user.id
    user_name = query.from_user.full_name
    event["user_names"][user_id] = user_name

    old_text = format_event(event_id)
    old_markup_present = bool(query.message.reply_markup and getattr(query.message.reply_markup, "inline_keyboard", None))

    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        event["closed"] = True
        logger.info("–°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç: %s by %s", event_id, user_name)

    else:
        if event["closed"]:
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
            return

        if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            for k in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
                if k != btn:
                    event["lists"][k].discard(user_id)
            event["lists"][btn].add(user_id)
            if btn != "–Ø –±—É–¥—É":
                event["plus_counts"].pop(user_id, None)

        elif btn == "–ü–ª—é—Å":
            event["plus_counts"][user_id] = event["plus_counts"].get(user_id, 0) + 1

        elif btn == "–ú–∏–Ω—É—Å":
            if user_id in event["plus_counts"]:
                event["plus_counts"][user_id] -= 1
                if event["plus_counts"][user_id] <= 0:
                    event["plus_counts"].pop(user_id, None)

    save_event(event_id, event)

    new_text = format_event(event_id)
    need_edit = new_text != old_text or (old_markup_present and event["closed"])
    if need_edit:
        reply_markup = None if event["closed"] else get_keyboard(event_id)
        try:
            await query.edit_message_text(text=new_text, parse_mode="HTML", reply_markup=reply_markup)
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise

# --- Main ---
def main():
    init_db()
    load_events()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new_event", new_event))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(CommandHandler("list_events", list_events))

    logger.info("Starting webhook, URL=%s, PORT=%s", WEBHOOK_URL, PORT)
    app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)

if __name__ == "__main__":
    main()

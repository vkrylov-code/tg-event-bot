import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

events = {}

BUTTONS_FIRST_ROW = [
    ("‚úÖ –Ø –±—É–¥—É", "–Ø –±—É–¥—É"),
    ("‚ùå –Ø –Ω–µ –∏–¥—É", "–Ø –Ω–µ –∏–¥—É"),
    ("ü§î –î—É–º–∞—é", "–î—É–º–∞—é")
]

BUTTONS_SECOND_ROW = [
    ("‚ûï –ü–ª—é—Å", "–ü–ª—é—Å"),
    ("‚ûñ –ú–∏–Ω—É—Å", "–ú–∏–Ω—É—Å"),
    ("üîí –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä")
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /create –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é \\n"
    )

async def create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: /create –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞")
        return

    title = " ".join(context.args).replace("\\n", "\n")
    event_id = str(len(events) + 1)
    events[event_id] = {
        "title": title,
        "lists": {btn[1]: set() for btn in BUTTONS_FIRST_ROW + BUTTONS_SECOND_ROW[:-1]},
        "plus_counts": {},
        "closed": False
    }

    await update.message.reply_text(
        f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n<b>{title}</b>",
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )

def get_keyboard(event_id, closed=False):
    if closed:
        return InlineKeyboardMarkup([])
    keyboard = [
        [InlineKeyboardButton(text=text, callback_data=f"{event_id}|{data}") for text, data in BUTTONS_FIRST_ROW],
        [InlineKeyboardButton(text=text, callback_data=f"{event_id}|{data}") for text, data in BUTTONS_SECOND_ROW]
    ]
    return InlineKeyboardMarkup(keyboard)

def format_event(event_id):
    event = events[event_id]
    text = f"<b>{event['title']}</b>\n\n"
    for btn in event["lists"].keys():
        members_list = []
        for member in event["lists"][btn]:
            if btn == "–Ø –±—É–¥—É":
                count = event["plus_counts"].get(member, 0)
                members_list.append(f"{member}" + (f" +{count}" if count > 0 else ""))
            else:
                members_list.append(member)
        members = "\n".join(members_list) if members_list else "‚Äî"
        text += f"<b>{btn}:</b>\n{members}\n\n"

    total_go = len(event["lists"]["–Ø –±—É–¥—É"]) + sum(event["plus_counts"].values())
    total_yes = len(event["lists"]["–Ø –±—É–¥—É"]) + sum(event["plus_counts"].values())
    total_no = len(event["lists"]["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(event["lists"]["–î—É–º–∞—é"])

    text += "-----------------\n"
    text += f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}\n"
    text += f"‚úÖ {total_yes}\n"
    text += f"‚ùå {total_no}\n"
    text += f"ü§î {total_think}\n"

    if event["closed"]:
        text += "‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç."
    return text

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id, btn = query.data.split("|")
    event = events.get(event_id)
    if not event:
        return

    user_name = query.from_user.full_name

    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        event["closed"] = True
        await query.edit_message_text(
            text=format_event(event_id),
            parse_mode="HTML",
            reply_markup=get_keyboard(event_id, closed=True)
        )
        return

    if event["closed"]:
        await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –∏–∑ —Ç—Ä–µ—Ö
    if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
        for key in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            if key != btn:
                event["lists"][key].discard(user_name)
        event["lists"][btn].add(user_name)
        if btn != "–Ø –±—É–¥—É":
            event["plus_counts"].pop(user_name, None)

    elif btn == "–ü–ª—é—Å":
        # –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–Ø –±—É–¥—É"
        event["lists"]["–î—É–º–∞—é"].discard(user_name)
        event["lists"]["–Ø –Ω–µ –∏–¥—É"].discard(user_name)
        event["lists"]["–Ø –±—É–¥—É"].add(user_name)
        event["plus_counts"][user_name] = event["plus_counts"].get(user_name, 0) + 1

    elif btn == "–ú–∏–Ω—É—Å":
        if user_name in event["plus_counts"]:
            event["plus_counts"][user_name] -= 1
            if event["plus_counts"][user_name] <= 0:
                event["plus_counts"].pop(user_name)
                event["lists"]["–Ø –±—É–¥—É"].discard(user_name)

    await query.edit_message_text(
        text=format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )

if __name__ == "__main__":
    TOKEN = "TOKEN"
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("create", create_event))
    app.add_handler(CallbackQueryHandler(button_click))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

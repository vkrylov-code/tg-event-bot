# bot.py
import os
import html
import logging
from uuid import uuid4

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://myapp.onrender.com/secret123
PORT = int(os.environ.get("PORT", 8443))

if not TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –ü—Ä–µ–∫—Ä–∞—â–∞—é –∑–∞–ø—É—Å–∫.")
    raise SystemExit("BOT_TOKEN is required")

if not WEBHOOK_URL:
    logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (Render).")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏ ---
# events: {event_id: {"text": str, "lists": {"–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"}, "plus_counts": {user: int}, "closed": bool}}
events = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard(event_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup –∏–ª–∏ None (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä"),
        ]
    ])


# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML) ---
def format_event(event_id: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç HTML-—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ / –∑–∞–≥–æ–ª–æ–≤–æ–∫)."""
    event = events[event_id]
    title = html.escape(event["text"])  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    parts = [f"<b>{title}</b>\n"]

    lists = event["lists"]
    plus_counts = event["plus_counts"]

    # –°–ø–∏—Å–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    # –Ø –±—É–¥—É (—Å +N –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
    if lists["–Ø –±—É–¥—É"]:
        lines = []
        for u in sorted(lists["–Ø –±—É–¥—É"]):
            name = html.escape(u)
            cnt = plus_counts.get(u, 0)
            lines.append(name + (f" +{cnt}" if cnt > 0 else ""))
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + "\n".join(lines) + "\n")

    if lists["–Ø –Ω–µ –∏–¥—É"]:
        lines = [html.escape(u) for u in sorted(lists["–Ø –Ω–µ –∏–¥—É"])]
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + "\n".join(lines) + "\n")

    if lists["–î—É–º–∞—é"]:
        lines = [html.escape(u) for u in sorted(lists["–î—É–º–∞—é"])]
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + "\n".join(lines) + "\n")

    # –ò—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_plus_count = sum(plus_counts.values())
    total_go = total_yes_people + total_plus_count
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)


# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/new_event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
        "/new_event –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    )


async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ—Ä—ë–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    raw = update.message.text or ""
    text = raw
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if raw.startswith("/new_event"):
        text = raw[len("/new_event"):].strip()
    if not text:
        text = "–°–æ–±—ã—Ç–∏–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"

    event_id = uuid4().hex
    events[event_id] = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},  # {user_name: count}
        "closed": False
    }

    logger.info("–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ id=%s by %s: %s", event_id, update.effective_user.full_name, text)

    await update.message.reply_text(
        format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å "–∑–∞–≥—Ä—É–∑–∫–∞"

    # –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    logger.info("Callback from user=%s data=%s", query.from_user.full_name, query.data)

    # –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    try:
        event_id, btn = query.data.split("|", 1)
    except ValueError:
        logger.warning("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data: %s", query.data)
        return

    event = events.get(event_id)
    if not event:
        logger.warning("Event not found: %s", event_id)
        await query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_name = query.from_user.full_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    old_text = format_event(event_id)
    old_markup_present = bool(query.message.reply_markup and getattr(query.message.reply_markup, "inline_keyboard", None))

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        if event["closed"]:
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–π —Å–±–æ—Ä: %s", event_id)
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            return
        event["closed"] = True
        logger.info("–°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç: %s by %s", event_id, user_name)
    else:
        if event["closed"]:
            logger.info("–ù–∞–∂–∞—Ç–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º —Å–±–æ—Ä–µ: %s by %s", event_id, user_name)
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
            return

        if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            for k in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
                if k != btn:
                    event["lists"][k].discard(user_name)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            event["lists"][btn].add(user_name)
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–Ø –±—É–¥—É", —É–¥–∞–ª—è–µ–º –ø–ª—é—Å—ã
            if btn != "–Ø –±—É–¥—É":
                if user_name in event["plus_counts"]:
                    logger.debug("–£–¥–∞–ª—è–µ–º –ø–ª—é—Å-–≥–æ–ª–æ—Å–∞ —É %s, —Ç.–∫. –æ–Ω –≤—ã–±—Ä–∞–ª %s", user_name, btn)
                event["plus_counts"].pop(user_name, None)
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s -> %s (event %s)", user_name, btn, event_id)

        elif btn == "–ü–ª—é—Å":
            # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ "–Ø –±—É–¥—É" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª—é—Å
            event["lists"]["–î—É–º–∞—é"].discard(user_name)
            event["lists"]["–Ø –Ω–µ –∏–¥—É"].discard(user_name)
            event["lists"]["–Ø –±—É–¥—É"].add(user_name)
            event["plus_counts"][user_name] = event["plus_counts"].get(user_name, 0) + 1
            logger.info("–ü–ª—é—Å: %s —Ç–µ–ø–µ—Ä—å +%d (event %s)", user_name, event["plus_counts"][user_name], event_id)

        elif btn == "–ú–∏–Ω—É—Å":
            if user_name in event["plus_counts"]:
                event["plus_counts"][user_name] -= 1
                if event["plus_counts"][user_name] <= 0:
                    event["plus_counts"].pop(user_name, None)
                    event["lists"]["–Ø –±—É–¥—É"].discard(user_name)
                    logger.info("–ú–∏–Ω—É—Å –æ–±–Ω—É–ª–∏–ª –ø–ª—é—Å—ã ‚Äî %s —É–¥–∞–ª—ë–Ω –∏–∑ '–Ø –±—É–¥—É' (event %s)", user_name, event_id)
                else:
                    logger.info("–ú–∏–Ω—É—Å: %s —Ç–µ–ø–µ—Ä—å +%d (event %s)", user_name, event["plus_counts"][user_name], event_id)
            else:
                logger.debug("–ú–∏–Ω—É—Å –æ—Ç %s, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ –±—ã–ª–æ –ø–ª—é—Å–æ–≤ (event %s)", user_name, event_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    new_text = format_event(event_id)
    # –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?
    need_edit = False
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ–Ω—è–ª—Å—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if new_text != old_text:
        need_edit = True
    # –ò–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ, –Ω–æ –º—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    elif old_markup_present and event["closed"]:
        need_edit = True

    if not need_edit:
        logger.debug("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (event %s)", event_id)
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ reply_markup: –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç ‚Äî None (—É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É), –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    reply_markup = None if event["closed"] else get_keyboard(event_id)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Message is not modified.
    try:
        await query.edit_message_text(text=new_text, parse_mode="HTML", reply_markup=reply_markup)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ event %s –æ–±–Ω–æ–≤–ª–µ–Ω–æ", event_id)
    except BadRequest as e:
        msg = str(e)
        if "Message is not modified" in msg:
            logger.info("Edit skipped: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (BadRequest: Message is not modified).")
            return
        # –∏–Ω–∞—á–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.exception("BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        raise


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (webhook) ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new_event", new_event))
    app.add_handler(CallbackQueryHandler(button_click))

    logger.info("–ó–∞–ø—É—Å–∫ webhook, URL=%s, PORT=%s", WEBHOOK_URL, PORT)
    app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)


if __name__ == "__main__":
    main()

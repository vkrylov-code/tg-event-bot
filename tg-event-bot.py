# bot.py
import os
import html
import logging
from uuid import uuid4

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://myapp.onrender.com/secret123
PORT = int(os.environ.get("PORT", 8443))

if not TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –ü—Ä–µ–∫—Ä–∞—â–∞—é –∑–∞–ø—É—Å–∫.")
    raise SystemExit("BOT_TOKEN is required")

if not WEBHOOK_URL:
    logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (Render).")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏ ---
# events: {event_id: {
#   "text": str,
#   "lists": {"–Ø –±—É–¥—É": set(user_id), "–Ø –Ω–µ –∏–¥—É": set(user_id), "–î—É–º–∞—é": set(user_id)},
#   "plus_counts": {user_id: int},
#   "user_names": {user_id: str},
#   "closed": bool
# }}
events = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_keyboard(event_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –Ø –±—É–¥—É", callback_data=f"{event_id}|–Ø –±—É–¥—É"),
            InlineKeyboardButton("‚ùå –Ø –Ω–µ –∏–¥—É", callback_data=f"{event_id}|–Ø –Ω–µ –∏–¥—É"),
            InlineKeyboardButton("ü§î –î—É–º–∞—é", callback_data=f"{event_id}|–î—É–º–∞—é"),
        ],
        [
            InlineKeyboardButton("‚ûï –ü–ª—é—Å", callback_data=f"{event_id}|–ü–ª—é—Å"),
            InlineKeyboardButton("‚ûñ –ú–∏–Ω—É—Å", callback_data=f"{event_id}|–ú–∏–Ω—É—Å"),
            InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä", callback_data=f"{event_id}|–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä"),
        ]
    ])

def format_user_link(user_id: int, name: str) -> str:
    """–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Telegram."""
    safe = html.escape(name)
    return f'<a href="tg://user?id={user_id}">{safe}</a>'

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML) ---
def format_event(event_id: str) -> str:
    event = events[event_id]
    title = html.escape(event["text"])
    parts = [f"<b>{title}</b>\n"]
    lists = event["lists"]
    plus_counts = event["plus_counts"]
    user_names = event["user_names"]

    # 1) –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ "–Ø –±—É–¥—É" (—Å +N –µ—Å–ª–∏ –µ—Å—Ç—å)
    if lists["–Ø –±—É–¥—É"]:
        lines = []
        for uid in sorted(lists["–Ø –±—É–¥—É"], key=lambda x: user_names.get(x, "")):
            name = user_names.get(uid, "User")
            link = format_user_link(uid, name)
            cnt = plus_counts.get(uid, 0)
            lines.append(link + (f" +{cnt}" if cnt > 0 else ""))
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>‚úÖ –Ø –±—É–¥—É:</b>\n‚Äî\n")

    # 2) –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–ª—é—Å—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å plus_counts, –Ω–æ –∏—Ö –Ω–µ—Ç –≤ lists["–Ø –±—É–¥—É"]
    anon_lines = []
    for uid, cnt in sorted(plus_counts.items(), key=lambda x: user_names.get(x[0], "")):
        if uid not in lists["–Ø –±—É–¥—É"]:
            # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∏–º–µ–Ω–∏
            anon_lines.append(f"‚Äî +{cnt}")
    if anon_lines:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä—è–º–æ –≤ –±–ª–æ–∫ "–Ø –±—É–¥—É" –ø–æ—Å–ª–µ –∏–º–µ–Ω (–µ—Å–ª–∏ –±—ã–ª–∏)
        # –ï—Å–ª–∏ –≤ "–Ø –±—É–¥—É" –±—ã–ª–∏ –∏–º–µ–Ω–∞, –æ–Ω–∏ —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ. –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–∂–µ —Ç—É–¥–∞.
        # –î–ª—è –±–æ–ª–µ–µ —è–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤–∏–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ "–î–æ–ø. –º–µ—Å—Ç–∞ (–±–µ–∑ –∏–º–µ–Ω–∏)" ‚Äî –Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–∫–∞–∂–µ–º –ø—Ä–æ—Å—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–Ø –±—É–¥—É" –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–º–µ–Ω–∏.
        parts.append("\n".join(anon_lines) + "\n")

    # 3) "–Ø –Ω–µ –∏–¥—É"
    if lists["–Ø –Ω–µ –∏–¥—É"]:
        lines = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–Ø –Ω–µ –∏–¥—É"], key=lambda x: user_names.get(x, ""))]
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>‚ùå –Ø –Ω–µ –∏–¥—É:</b>\n‚Äî\n")

    # 4) "–î—É–º–∞—é"
    if lists["–î—É–º–∞—é"]:
        lines = [format_user_link(uid, user_names.get(uid, "User")) for uid in sorted(lists["–î—É–º–∞—é"], key=lambda x: user_names.get(x, ""))]
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n" + "\n".join(lines) + "\n")
    else:
        parts.append("<b>ü§î –î—É–º–∞—é:</b>\n‚Äî\n")

    # –ò—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫
    total_yes_people = len(lists["–Ø –±—É–¥—É"])
    total_plus_count = sum(plus_counts.values())
    total_go = total_yes_people + total_plus_count
    total_no = len(lists["–Ø –Ω–µ –∏–¥—É"])
    total_think = len(lists["–î—É–º–∞—é"])

    parts.append("-----------------")
    parts.append(f"–í—Å–µ–≥–æ –∏–¥—É—Ç: {total_go}")
    parts.append(f"‚úÖ {total_go}")
    parts.append(f"‚ùå {total_no}")
    parts.append(f"ü§î {total_think}")

    if event["closed"]:
        parts.append("\n‚ö†Ô∏è –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.")

    return "\n".join(parts)

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "/new_event –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è\n\n"
        "–í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä:\n"
        "/new_event –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞"
    )

async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text or ""
    text = raw
    if raw.startswith("/new_event"):
        text = raw[len("/new_event"):].strip()
    if not text:
        text = "–°–æ–±—ã—Ç–∏–µ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"

    event_id = uuid4().hex
    events[event_id] = {
        "text": text,
        "lists": {"–Ø –±—É–¥—É": set(), "–Ø –Ω–µ –∏–¥—É": set(), "–î—É–º–∞—é": set()},
        "plus_counts": {},      # {user_id: int}
        "user_names": {},       # {user_id: full_name}
        "closed": False
    }

    logger.info("–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ id=%s by %s: %s", event_id, update.effective_user.full_name, text)

    await update.message.reply_text(
        format_event(event_id),
        parse_mode="HTML",
        reply_markup=get_keyboard(event_id)
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    logger.info("Callback from %s data=%s", query.from_user.full_name, query.data)

    try:
        event_id, btn = query.data.split("|", 1)
    except ValueError:
        logger.warning("Bad callback_data: %s", query.data)
        return

    event = events.get(event_id)
    if not event:
        await query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        logger.warning("Event not found: %s", event_id)
        return

    user_id = query.from_user.id
    user_name = query.from_user.full_name
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    event["user_names"][user_id] = user_name

    old_text = format_event(event_id)
    old_markup_present = bool(query.message.reply_markup and getattr(query.message.reply_markup, "inline_keyboard", None))

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
    if btn == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä":
        if event["closed"]:
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
            logger.info("Close called but already closed: %s", event_id)
            return
        event["closed"] = True
        logger.info("–°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç: %s by %s", event_id, user_name)

    else:
        if event["closed"]:
            await query.answer("–°–±–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
            logger.info("Click after closed: %s by %s", event_id, user_name)
            return

        # –°—Ç–∞—Ç—É—Å—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç—Ä—ë—Ö)
        if btn in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            for k in ["–Ø –±—É–¥—É", "–Ø –Ω–µ –∏–¥—É", "–î—É–º–∞—é"]:
                if k != btn:
                    event["lists"][k].discard(user_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            event["lists"][btn].add(user_id)
            logger.info("User %s set status %s (event %s)", user_name, btn, event_id)
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª –Ω–µ "–Ø –±—É–¥—É" ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–ª—é—Å—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            if btn != "–Ø –±—É–¥—É":
                if user_id in event["plus_counts"]:
                    logger.debug("Removing plus_counts for %s because selected %s", user_name, btn)
                event["plus_counts"].pop(user_id, None)

        elif btn == "–ü–ª—é—Å":
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫. –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ "–Ø –±—É–¥—É".
            event["plus_counts"][user_id] = event["plus_counts"].get(user_id, 0) + 1
            logger.info("Plus: %s now +%d (event %s)", user_name, event["plus_counts"][user_id], event_id)

        elif btn == "–ú–∏–Ω—É—Å":
            if user_id in event["plus_counts"]:
                event["plus_counts"][user_id] -= 1
                if event["plus_counts"][user_id] <= 0:
                    event["plus_counts"].pop(user_id, None)
                    logger.info("Plus count reached 0 => removed plus entry for %s (event %s)", user_name, event_id)
                else:
                    logger.info("Minus: %s now +%d (event %s)", user_name, event["plus_counts"][user_id], event_id)
            else:
                logger.debug("Minus pressed by %s but no plus entry (event %s)", user_name, event_id)

    new_text = format_event(event_id)

    # –†–µ—à–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    need_edit = False
    if new_text != old_text:
        need_edit = True
    elif old_markup_present and event["closed"]:
        # —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ, –Ω–æ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)
        need_edit = True

    if not need_edit:
        logger.debug("No edit required for event %s", event_id)
        return

    reply_markup = None if event["closed"] else get_keyboard(event_id)

    try:
        await query.edit_message_text(text=new_text, parse_mode="HTML", reply_markup=reply_markup)
        logger.info("Message updated for event %s", event_id)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.info("Edit skipped: message not modified (event %s).", event_id)
            return
        logger.exception("BadRequest while editing message: %s", e)
        raise

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (webhook) ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new_event", new_event))
    app.add_handler(CallbackQueryHandler(button_click))

    logger.info("Starting webhook, URL=%s, PORT=%s", WEBHOOK_URL, PORT)
    app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)

if __name__ == "__main__":
    main()